[["index.html", "R for Conditional Process Analysis General information on the course How to use this tutorial What can I do if questions arise? What can I do if I have problems with my R code?", " R for Conditional Process Analysis Lara Kobilke, IKMZ, University of Zurich 2022-03-01 General information on the course This online tutorial will accompany the seminar Using Conditional Process Analysis to evaluate communication theories, a B.A. Seminar at the IKMZ (University of Zurich, FS2022). The course takes place via Zoom (Wednesday 10:15-11.45 am, ID: 645 8007 2506, password: lavaan). If you dont want or cant participate in this course from your home office, you can always visit the room AND-2-02 (Andreasstrasse 15, 8050 Zurich) during lecture hours. This is also a great opportunity to meet fellow students in person! You can access all necessary information on the seminars syllabus, important dates and assessments/evaluations via OLAT. There, additional resources (e.g. Powerpoint slides, helpful book resources) are uploaded to the materials folder. How to use this tutorial After completing this tutorial, you will have acquired two important skills: Know how to use R and R studio to complete your data management. Know how to use R and R studio to do Conditional Process Analysis. In the seminar, each session will consist of two parts. In the first part, we will look at communication theories and discuss relationships between communication variables. In the second part, you will work through this tutorial, the accompanying videos, and solve exercises together with fellow students. The tutorial is designed to provide the R skills that you need to put the seminars theoretical discussions into real-world practice. Beginners in R will work through the entire tutorial, while advanced users can skip individual chapters. The goal is to make the individual seminar sessions diverse and to advance your programming skills with as much ease and fun as possible. Each tutorial includes introduction to new functions/analysis methods in R, including corresponding R code information on other tutorials/sources on how to learn these methods exercises which will help you understand and apply your new knowledge (youll work through these with you peers) Special thanks Very special thanks goes to Valerie Hase, as the first part of this tutorial is an slightly adapted version of her highly recommendable Text as Data tutorial. You should definitely check out her work, too! What can I do if questions arise? Questions are always welcome! Since youll be learning a lot of new things, its perfectly normal to have a lot of questions. If you do not understand something in this tutorial, have questions about exercises, or just want some repetition during the Zoom seminar: Please do ask! The most important thing when learning R is to understand that it is completely normal to feel lost sometimes. Dont worry - its highly likely that everyone else feels the same. Therefore, its key that you ask questions. There are three channels through which you may pose question you have (preferably in this order): Our Zoom sessions: Wednesday, 10:15-11:45. The OLAT forum: Outside of those sessions, please use the OLAT forum to ask any questions. This way, every participant will be able to see your questions, provide answers and see my answers. Thus, everybody will be provided with the same information. I recommend you turn on notifications about new entries in the forum to be informed about ongoing discussions. Image: How to turn on notifications: Email: If you have very specific questions about your own project etc. (or things you may not want to discuss with everyone in class), write me an email: l.kobilke@ikmz.uzh.ch. What can I do if I have problems with my R code? Besides asking a question during the seminar (see What can I do if questions arise?), there are some great places to have a look at when you encounter problems. Ill cover them in the section Help?! in greater detail. To give you a head start, heres a quick rundown of the three best places to look if you have a problem with your code: Rs integrated help function: Use the ?-function whenever possible. Lets assume you struggle with creating a histogram for your data (hist function in R). You can open the R documentation of the hist function in R by writing: ?hist Preview of ?hist in R: Search engines: Like Bing or Google. Yup, programmers and data scientists google all the time! Nobody knows all the code and errors by heart. Often you can find perfect answers to your questions on Stackoverflow, StatsExchange, or Rseek because other people had exactly the same problems. And more importantly, the communities on these websites are very friendly and helpful. Packages reference manuals: Finally, problems with R packages (well get to packages later, see: Packages) can often be solved by looking at their reference manuals (an overview document containing all of a packages functions). For example, you can learn more about dplyr (a data management package that we are going to use later in this tutorial) by visiting its reference manual on a website called CRAN: https://cran.r-project.org/web/packages/dplyr/dplyr.pdf. Thats it. Lets start with our first tutorial: Tutorial: Installing &amp; Understanding R/R Studio "],["tutorial-installing-understanding-rr-studio.html", " 1 Tutorial: Installing &amp; Understanding R/R Studio 1.1 Installing R 1.2 Installing R Studio 1.3 Updating R and R Studio 1.4 How does R work? 1.5 How does R Studio work? 1.6 Take-Aways 1.7 More tutorials on this", " 1 Tutorial: Installing &amp; Understanding R/R Studio After working through Tutorial 1, youll know how to install R and R Studio know how to update R and R Studio understand the main set-up of R Studio 1.1 Installing R R is the programming language well use to import, edit, and analyze data. Please watch one of these two video tutorials before installing R yourself. Video Tutorial for Windows Video Tutorial for Mac When you are ready to install R, use Cran to install the newest version of R (4.1.2, Bird Hippie). Youll have to specify your operation system to download the right version: Installer for Windows Installer for Mac 1.2 Installing R Studio Next, install R Studio. R Studio is a desktop application with a graphical interface that facilitates programming with R. The newest version of R Studio (1.4.1717) can be downloaded via this Link. 1.3 Updating R and R Studio If you have already installed R and RStudio (for example, because you already needed it for a previous seminar), please update your version to the latest version. This way, well all know that our versions are compatible. 1.3.1 On Windows Updating on Windows is tricky. Therefore, you can use a package called installr, which helps you manage your update. First, install the installr package if you dont have it. Use the following code: # installing/loading the package: if(!require(installr)) { install.packages(&quot;installr&quot;); require(installr) } #load / install+load installr After you have installed or loaded the installr package, lets start the updating process of your R installation. It will check for newer versions, and if one is available, will guide you through the decisions youd need to make: # using the package: updateR() Finally, update R Studio. Updating RStudio is easy, just go to Help &gt; Check for Updates to install a newer version. 1.3.2 On MAC Go to CRAN and install the newer package intaller. 1.4 How does R work? First things first: R is an object- and function-oriented programming language. Chambers (2014, p. 4) has nicely summarized what this means: Everything that exists is an object. Everything that happens is a function call. We assign values (for instance, single numbers/letters, several numbers/letters, or whole data sets) to objects in R to work with them/do computations. For instance, the following command in R would assign the word hello to the object word by using the &lt;- sign (a function used for assigning values to objects): word &lt;- &quot;hello&quot; Objects have specific properties that determine which types of calculations can be done with them (and which cannot). For instance, the object word is characterized by the fact that it consists of characters (i.e., a word) - which may, for instance, prohibit you to calculate the mean of this object (which is something only possible for objects consisting of numeric data). This already hints towards the second, important aspect of R: It is influenced by functional programming, meaning that everything we do in R is a function call. R uses functions to assign specific values (for instance, a single number or word, several numbers or words, whole data sets) to objects. In short, what you will learn by learning programming in R is how to write functions for making R do the calculations you need. Lets take SPSS - which, I assume, many of you have worked with previously - as a comparison. If you import, edit, or analyze a data set in SPSS, youll use the click-and-point menu to change variable values, calculate variables means, or export data. R works differently: You assign the data set to an object - for instance an object called word, as done previously. This assignment enables you to work with the data: You can now call specific functions to work with or change this object. For instance, if you want to add another word to the object word, for instance and good morning, you could do that by using a specific function called paste0(), which takes the original object word and adds your additional words  and good morning to overwrite the old object word: word &lt;- paste0(word, &quot; and good morning&quot;) word ## [1] &quot;hello and good morning&quot; Different to using the click-and-point menu in SPSS, you thus need to write your own code to import, edit, or analyze any type of data in R. Luckily, R already includes a lot of predefined functions meaning that we do not have write all of these functions ourselves. Ouch, that seems awfully complicated. Why should I use R? There are several reasons why Im an advocate of R (or similar programming languages such as Python) over programs such as SPSS. R is free. Other than most other (statistical) programs, you do not need to buy it (or rely on an university license, that is likely to run out once you leave your department). R is an open source program. Other than most other programs, the source code - i.e., the basis of the program - is freely available. So are the hundred of packages (well get to those later - these are basically additional functions you may need for more specific analyses) on CRAN that you can use to extend Rs base functions. R offers you flexibility. You can work with almost any type of data and rely on a large (!) set of functions to import, edit, or analyze such data. And if the function you need to do so hasnt been implemented (or simply does not exist yet), you can write it yourself! Learning R increases your chances on the job market. For many jobs (academia, market research, data science, data journalism), applicants should know at least one programming language. 1.5 How does R Studio work? As mentioned, R studio is a graphical interface which facilitates programming with R. It contains up to four main windows, which allow for different things: Writing your own code (Window 1: Source). Important: When first installing R/R Studio and opening R studio, you may not see this window right away. In this case, simply open it by clicking on File/New File/R Script. Executing your own code (Window 2: Console) Inspecting objects (Window 3: Environment) Visualizing data, searching for help, updating packages etc. (Window 4: Files/Plots/Packages etc.) Image: Four main windows in R Please note that the specific set-up of your R Studio may look different (the order of windows may vary and so may the windows names). I have made the experience that having these four windows open works best for me. This may be different for you. If you want to modify the appearance of your R Studio, simply choose Tools/Global Options/Pane Layout. Image: Changing the Layout 1.5.1 Source: Writing your own code Using the window Source, youll write your own code to execute whichever task you want R to fulfill. 1.5.1.1 Writing Code Lets start with an easy example: Assume you simply want R to print the word hello. In this case, you would first write a simple command that assigns the word hello to an object called word. The assigment of values to named objects is done via either the operator &lt;- or the operator =. The left side of that command contains the object that should be created; its right side the values that should be assigned to this object. In short, this command tells R to assign the world hello to an object called word. word &lt;- &quot;hello&quot; Image: Source 1.5.1.2 Annotating Code Another helpful aspect of R is that you can comment your own code. Oftentimes, this is very helpful for understanding your code later (if you write several hundred lines of codes, you may not remember their exact meaning months later). Comments or notes can be made via hashtags #. Anything following a hashtag will not be considered code by R but be ignored instead. word &lt;- &quot;hello&quot; #this line of code assigns the word &quot;hello&quot; to an object called word 1.5.1.3 Executing Code We now want to execute our code. Doing so is simple: Mark the parts of the code you want to run (for instance, single rows of code or blocks of code across several rows) Either press Run (see upper right side of the same window) or press Ctrl + Enter (On Mac OS X, hold the command key and press return instead). R should now execute exactly those lines of codes that you marked (hereby creating the object word). If you havent marked any specific code, all lines of code will be executed. Image: Executing Code 1.5.2 Console: Printing results Results of executing code are printed in a second window called Console, which includes the code you ran and the object you may have called when doing so. Previously, we defined an object called word, which consists of the single word hello. Thus, R prints our code as well as objects called when running this code (here, the object word) in the console. word &lt;- &quot;hello&quot; word ## [1] &quot;hello&quot; Image: Window Console 1.5.3 Environment: Overview of objects The third window is called Environment1. This windows displays all the objects currently existing - in our case, only the object word. As soon as you start creating more objects, this environment will fill up. If youre an SPSS user, this window is very similar to what is called the Datenansicht / Data overview in SPSS. However, the R version of this is much more flexible, given that our environment can contain several data sets, for example, at the same time. Image: Window Environment It is important to know that we can visually inspect any object using the View() command (with a new tab then opening in the Source window). This isnt super helpful right now - but if you work with bigger data sets with several observations/variables later on, it is often useful to inspect data visually. View(word) Image: Window View 1.5.4 Plots/Help/Packages: Do everything else Lastly, the standard R Studio interface contains a fourth window (if you opted for this layout). In my case, the window contains several sub-sections called Files, Plots, or Packages among others. Youll understand their specific functions later - the window can, for instance, be used to plot/visualize results or see which packages are currently loaded. Image: Window Files/Plots/Packages 1.6 Take-Aways Window Source: used to write/execute code in R Window Console: used to return results of executed code Window Environment: used to inspect objects on which to use functions Window Files/Plots/Packages etc.: used for additional functions, for instance visualizations/searching for help/activating or updating packages 1.7 More tutorials on this You still have questions? The following tutorials &amp; papers can help you with that: YaRrr! The Pirates Guide to R by N.D.Phillips, Tutorial 2 Computational Methods in der politischen Kommunikationsforschung by J. Unkel, Tutorial 1 SICSS Boot Camp by C. Bail, Video 1 wegweisR by M. Haim, Video 1 R Cookbook by Long et al., Tutorial 1 Lets keep going: [Tutorial 2: Workflow in R] again, this only applies for the way I set up my R Studio. You can change this via Tools/Global Options/Pane Layout "],["tutorial-workflow-in-r.html", " 2 Tutorial: Workflow in R 2.1 Defining your working directory 2.2 Packages 2.3 Help?! 2.4 Saving, loading &amp; cleaning code/results 2.5 More tutorials on this", " 2 Tutorial: Workflow in R Tutorial 2 will not yet deal with how to write code and do your own analyses in R (dont worry, well get there soon!). Before you write your own code, you should understand the basic workflow when working with R and R Studio - independent of whether you want to calculate a regression model, do an automated content analysis, or visualize results of an analysis. After working through Tutorial 2, youll understand the basic work flow in R. 2.1 Defining your working directory The first step of any type of analysis is to define your working directory. You may wonder: Whats that? Your working directory is the folder from which data can be imported into R or to which you can export and save data created with R. Create a folder that you want to use as your working directory for this tutorial (or use an existing one, that also works). Go to that folder and copy the path to it: Image: Working Directory Image: Copy Working Directory Now you know where this working directory is located - but R should know, too! Telling R from which folder to import data or where to export data to is also called setting your working directory. We call a function called setwd() (you guessed right: short for setting you working directory) which allows us to do exactly that. Important: The way this working directory is set differs between Windows- and Mac-Operating Systems. Windows: The dashes need to be pointing towards the right direction (if you simply copy the path to the folder, you may need to replace these signs \\ with /) setwd(&quot;C:/Users/LaraK/Documents/CPA-Seminar&quot;) Mac: You may need to add a / at the beginning like so: setwd(&quot;/Users/LaraK/Documents/CPA-Seminar&quot;) If you have forgotten where you set your working directory, you can also ask R about the path of your current working directory with getwd(): getwd() ## [1] &quot;C:/Users/LaraK/Documents/CPA-Seminar&quot; 2.2 Packages Ive been talking about packages before: While base R, i.e., the standard version of R, already includes many helpful functions, you may at times need other, additional functions. For instance, in the case of conditional process analysis - the method, well focus on in this seminar - well need to use specific packages including additional functions. Packages are collections of topic-specific functions that extend the functions implemented in base R. In the spirit of open science, anyone can write and publish these additional functions and related packages and anyone can also access the code used to do so. Youll find a list of all of R packages here. In this seminar, well for instance use packages like ProcessR or lavaan for conditional process analysis. 2.2.1 Installing packages To use a package, you have to install it first. Lets say youre interested in using the package ProcessR. Using the command install.packages(), you can install the package on your computer. Youll have to give the function the name of the package you are interested in installing. install.packages(&quot;processR&quot;) Now the package has been installed on your computer and is accessible locally. We only have to use install.packages() for any package once. Afterwards, the only thing youll have to do after open R is to activate the already installed package - which well learn next. 2.2.2 Activating packages Before we are able to use a package, we need to activate it in each session. Thus, you should not only define a working directory at the beginning of each session but also activate the packages you want to use via the library()_ command. Again, youll have to give R the name of the package you want to activate: library(&quot;processR&quot;) Else, you can also use the name of the package followed by two colons :: to activate a package directly before calling one of its function. For instance, I do not need use to activate the ProcessR package (by using the library() function) to use the function meanCentering() if I use the following code: processR::meanCentering() 2.2.3 Getting information about packages The package is installed and activated - but how can we use it? To get an overview of functions included in a given package, you can consult its corresponding reference manual (overview document containing all of a packages functions) or, if available, its vignette (tutorials on how to use selected functions for the corresponding package) provided by a packages author on a website called CRAN. The easiest way to finding these manuals/vignettes is Google: Simply google CRAN ProcessR, for instance, and youll be guided to the following website: Image: Cran Overview ProcessR package The first paragraph (circled in red) gives you an overview of aspects for which this package may be useful. The second red-circled area links to the reference manual and the vignette. You can, for instance, check out the reference manual to get an idea of the many functions the processR package contains. Another way of getting there is to simply use the help()-function provided by R, which well get to now. 2.3 Help?! The one thing you can count on in this seminar is that many things will not work right away: Youll forget commands or what to use them for, the name of packages you need, or be confronted with errors messages that you need to understand to fix a given problem. This happens to anyone: from beginners to those having worked with R for many years. In this case, you need: help(). 2.3.1 Finding information about packages If you have a package installed and youre interested in this specific package, you can also use R and the help() function (or simply use ?, which leads to the same result): help(dplyr) #Version 1 of asking for help ?dplyr #Version 2 of asking for help In turn, youll get more information via the window Help: Image: Overview for the dplyr package 2.3.2 Finding information about functions Oftentimes, you need help with a specific function. Ill give you an example: Lets say I teach a seminar with 10 students. I have asked all of them about their age. I have now saved their answers (i.e., 10 different numbers) in an object called age. This object is a vector, i.e. an object that consists of several values of the same data type - well get to this in Tutorial: Objects &amp; structures in R. age &lt;- c(23, 26, 19, 28, 24, 22, 21, 27, 24, 24) Now we want R to compute the mean age of students in the seminar using the mean() function. We thus ask R to compute the mean of the vector age like so: We call the function mean(). We specify all necessary conditions to run it - here that x = age, i.e. that R should compute the mean of all values in the vector age: mean(x = age) ## [1] 23.8 That looks good - R tells us that the mean age of our students is 23.8 years. Lets say I did the same thing for a different seminar: I also asked students about their age. while most chose to answer, some refused to answer. Thus, I recorded missing answers as NA (NA is used to record missing values, short for not available). age &lt;- c(23, 26, NA, 28, 24, 22, 21, NA, 24, NA) mean(x = age) ## [1] NA However, when trying to get the students mean age, R tells us that the mean is NA (i.e., missing). But do we really only have missing values? Lets inspect our data again: age ## [1] 23 26 NA 28 24 22 21 NA 24 NA Thats not true: 7 out of 10 students told us their age; only 3 refused to answer (here recorded as NA). So why does R tell us that the overall mean is missing - shouldnt the function simply ignore NAs and tells us the mean age of all of those 7 students who answered our question? To do some troubleshooting, we use the help() function. We specify for which function we need help: ?mean This is where our fourth window comes into place as results for our search for help are depicted here (the paragraph depicted here is the reference manual including information on the mean() function). Image: Help for error with mean()-function It includes important information on the function (of which well discuss only some, namely those circled in red): Description: explains for which types of tasks the function mean() should be used Usage: explains how the function mean() should be used Arguments: explains which elements need to be or can be defined for using mean() and how these elements need to be specified Examples: exemplifies how the function mean() can be used When inspecting the section Arguments, well soon discover something very important: mean() is a function that needs an object x for which the mean should be calculated. In this case, we specified x to consist of the vector age by typing x = age. mean(x = age) Upon further inspection, however, we see something else: The mean() function needs more information. In particular, we have to specify how R should deal with missing values, here NAs (see the section circled in red). This wasnt a problem in the first example (since we had no NAs), but seems to be a problem for the second example. The manual reads as follows: na.rm: a logical value indicating whether NA values should be stripped before the computation proceeds. This indicates that if our x contains any NAs, we need to tell R and the mean() function how to deal with these. We havent specified this yet, which is why R includes all missing values for calculation and thus tells us that - given that some values are missing - the mean is missing. If we want R to ignore all NAs, we need to actively set na.rm (short for removal of NAs) to TRUE. This tells R that the mean should be computed for all of those values for x that are not missing. The following command therefore gives us the mean age of all those students who chose to answer the question: mean(age, na.rm = TRUE) ## [1] 24 2.3.3 Searching for help online For some questions, using the help()-function wont cut it. In this case, Google is your new best friend. Ive almost never encountered a problem that others havent had and asked for answers online (and usually received a helpful response). When googling, look out for the following websites that often offer help for statistical/programming issues: Stackoverflow StatsExchange Rseek 2.3.3.1 Make sure to use relevant search terms When googling, make sure to use all relevant search terms. This includes at least: parts of the error message you are receiving or descriptions of the error the search term R (there are a lot of other programming languages and you should make sure that your answers are tailored to R) the function throwing the error Lets say you are trying to find out how to set your working directory since your R throws the following error: cannot find directory. Googling for help via search terms such as directory programming define will likely lead to insufficient results because: (a) the specific command you are having trouble with is missing, (b) the specific error message you are getting is missing, (c) the search request does not specify that you need answers for the programming language R. A better way to go around this would be something like: setwd() R error message cannot find directory: (a) you are specifying the command that gives you trouble, (b) you are specifying the error message, and (c) you are specifying that you want answers for R. 2.3.3.2 Dont trust every result you get While most Google searches will get you a multitude of different answers for your questions, not all of them are necessarily right for your specific problem. Moreover, there may be different solutions for the same problem - so dont be confused when people are proposing different approaches. Contrary to common conception, the internet is not always right - you may also get answers that are wrong or inefficient. Its often best to scroll through some search results and then try the solution that seems most understandable and/or suitable for you. 2.3.3.3 Make your problem reproducible It is often vital that others can reproduce your problem: Others need to see which lines of codes exactly created an error message, what the error message looked liked, which data you used, and on which type of machine/system you ran the analysis to help. For instance: Nobody is likely going to be able to help you with a request like this &quot;If I try to set my working directory, my computer tells me that I can&#39;t (the error says: Error: unpexted input in setwd(C:\\. What is the problem?&quot; This isnt great because no one knows the code that created the problem or the machine/system you used. Thus, you need to make your error replicable by giving the exact command and potentially information about your machine via sessionInfo(): &quot;I am trying to set my working directory on a Windows System using the following code: setwd(C:\\Users\\LaraK\\Documents\\CPA-Seminar) While the path to the folder that I want to be my working directory is definitely correct, R gives me the following error message: Error: unpexted input in setwd(C:\\.&quot; sessionInfo() ## R version 4.1.2 (2021-11-01) ## Platform: x86_64-w64-mingw32/x64 (64-bit) ## Running under: Windows 10 x64 (build 19044) ## ## Matrix products: default ## ## locale: ## [1] LC_COLLATE=English_United States.1252 LC_CTYPE=English_United States.1252 LC_MONETARY=English_United States.1252 ## [4] LC_NUMERIC=C LC_TIME=English_United States.1252 ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] tidyr_1.2.0 dplyr_1.0.8 extrafont_0.17 bookdown_0.24 rsconnect_0.8.25 ## ## loaded via a namespace (and not attached): ## [1] highr_0.9 pillar_1.7.0 compiler_4.1.2 bslib_0.3.1 jquerylib_0.1.4 tools_4.1.2 digest_0.6.29 ## [8] jsonlite_1.8.0 evaluate_0.15 lifecycle_1.0.1 tibble_3.1.6 pkgconfig_2.0.3 rlang_1.0.1 DBI_1.1.2 ## [15] cli_3.2.0 rstudioapi_0.13 yaml_2.3.5 xfun_0.29 fastmap_1.1.0 Rttf2pt1_1.3.10 stringr_1.4.0 ## [22] knitr_1.37 generics_0.1.2 vctrs_0.3.8 sass_0.4.0 tidyselect_1.1.2 glue_1.6.2 R6_2.5.1 ## [29] fansi_1.0.2 rmarkdown_2.11 purrr_0.3.4 extrafontdb_1.0 magrittr_2.0.2 ellipsis_0.3.2 htmltools_0.5.2 ## [36] assertthat_0.2.1 tinytex_0.37 utf8_1.2.2 stringi_1.7.6 crayon_1.5.0 2.3.4 Interrupting R Some commands run for a longer time - and you may realize while they are running that the code still contains an error. In this case, you may want to stop R in executing the command. If you want to do this manually, you can use the stop button in the window Console (only visible while R is executing code). Image: Interrupting R Else, you can use the menu via Session / Interrupt R. 2.4 Saving, loading &amp; cleaning code/results 2.4.1 Saving your code A great feature of R is that it makes analyses easily reproducible - given that you save your code. When reopening R Studio and you script, you can simply rerun the code with one click and your analysis will be reproduced. To save code, you have two options: Choose the menu option File/Save as. Important: Code needs to be saved with the ending .R. Chose the Save-button in the source window and save your code in the correct format, for instance as MyCode.R. Image: Saving code 2.4.2 Saving your results You have successfully executed all commands and now want R to save your results/working environment? Saving your results is especially useful if it takes some time to have R run through the code and reproduce results - in this case, you only need to save results once and can then load them for the next session. Again, there are several options for saving your results: Use the save.image()-command: save.image(&quot;MyData.RDATA&quot;) Use the save-button in the environment window and save your results in the correct format, for instance as MyData.RDATA. Image: Saving results 2.4.3 Loading working spaces Having saved results in a previous session, you can now easily import them in a new session. Using the load()-command, you can import working spaces into a new R session. Here, we first define the working directory in which R may find our results to then import results: setwd(&quot;C:/Users/LaraK/Documents/CPA-Seminar&quot;) load(&quot;MyData.RDATA&quot;) 2.4.4 Clean your working space After some time, your environment may be a bit messy: You may have defined objects you no longer need, which may lead to loosing sight of the things that are important. In this case, you can easily sort through relevant data and clean your working space. For instance, the rm()-command deletes specific objects in your environment. Say we want to save the object age since we no longer need it: rm(age) If you want a fresh start, you can also delete all objects in your environment. By specifying an empty lists of objects, ls(), as the element to be deleted via rm(), all objects get deleted: rm(list = ls()) 2.4.5 Take Aways Working Directory: The folder from which data can be imported into R or to which you can export and save data created with R. Should be defined at the beginning of each session. Commands: setwd(), getwd() Packages: Collections of topic-specific functions that extend the functions implemented in base R. You only need to install them once on your computer - but you have to activate packages at the beginning of each session. Otherwise, R will not be able to find related functions. Commands: install.packages(), library() Help: The thing everyone working with R needs. Its normal to run into errors when working with R - dont get frustrated too easily. Commands: ?, help() Saving, loading, and cleaning code/results: You should save your code/results from time to time to be able to replicate analyses. Commands: save.image, load(), rm() 2.5 More tutorials on this You still have questions? The following tutorials &amp; papers can help you with that: Computational Methods in der politischen Kommunikationsforschung by J. Unkel, Tutorial 5 &amp; 6 R Cookbook by Long et al., Tutorial 2 YaRrr! The Pirates Guide to R by N.D.Phillips, Tutorial 2 &amp; 9 Cheat sheet: Base R The tidyverse style guide Lets keep going: Tutorial: Using R as a calculator "],["tutorial-using-r-as-a-calculator.html", " 3 Tutorial: Using R as a calculator 3.1 Using variables for calculation 3.2 Using vectors for calculation 3.3 Take-Aways", " 3 Tutorial: Using R as a calculator After working through Tutorial 3, youll be able to work with mathematical operators in R be able to use mathematical operators on variables and vectors One of the first things everyone learns in R is to use R as a calculator. You have access to many mathematical operators in R (e.g. +, -, *, /, ^). Lets try some of them. Addition: 5+7 ## [1] 12 Subtraction: 12-7 ## [1] 5 Exponentiation: 3^3 ## [1] 27 3.1 Using variables for calculation You can also assign numbers to variables with the assign operator &lt;-. We have already talked about assigning word or numbers to variables in the chapter Writing Code. Please remember that a variable name in R can include numeric and alphabets along with special characters like dot (.) and underline (_). Therefore, these are good options to name your variables: my_1st_number &lt;- 3 my.1st.numer &lt;- 3 Do !not! use these variable names because they will cause errors and throw warning messages. I have therefore put the code as annotation to avoid the warning messages (with #): # _number &lt;- 3 # .number &lt;- 3 # my-1st-number &lt;- 3 You can use variables in your calculations by assigning the numbers to variables (i.e. store the numerical value in the variable). five &lt;- 5 seven &lt;- 7 twelve &lt;- five + seven # here you add the two variables in which the numbers are stored. The result of the addition is stored in the variable &quot;twelve&quot; twelve # now you have to retrieve the content of the variable, so that the result is printed to the console ## [1] 12 The names of the variables are freely selectable. For example, you can also proceed like this: three &lt;- 5 three # print the content of the variable to the console ## [1] 5 3.2 Using vectors for calculation You can also store more than one number in a variable. We call this process creating vectors because variables that contain more than one number are called vectors in R (well get to vectors in Tutorial: Objects &amp; structures in R). Vectors are created using the combine function c() in R. twelve &lt;- c(1,2,3,4,5,6,7,8,9,10,11,12) twelve # print the content of the variable to the console ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 Again, the variable name is chosen arbitrarily. You can also do this: twelve &lt;- c(4,10,15,21,33) twelve ## [1] 4 10 15 21 33 You can use mathematical operations on vectors (e.g., +, -, * and /). Lets create two vectors weight and height that contain the weight and height measures of 6 individuals. For example, the first individual weighs 60 kg and is 1.75 m tall: weight &lt;- c(60, 72, 57, 90, 95, 72) height &lt;- c(1.75, 1.80, 1.65, 1.90, 1.74, 1.91) Now we can calculate the Body Mass Index (BMI) using the BMI formula: BMI &lt;- weight/height^2 BMI # print the content of the BMI variable to the console ## [1] 19.59184 22.22222 20.93664 24.93075 31.37799 19.73630 Now we know that the first person has a BMI of 19.59, which is within the range of normality (18.5 and 24.9). 3.3 Take-Aways Mathematical operators: use +, -, *, /, ^ Use case: use these operators on numbers, variables, and vectors Now that we can use R as a calculator and have been introduced to the concept of variables and vectors, lets delve into the concept of objects an structures in R: Tutorial: Objects &amp; structures in R "],["tutorial-objects-structures-in-r.html", " 4 Tutorial: Objects &amp; structures in R 4.1 Types of data 4.2 Types of objects 4.3 Take Aways 4.4 More tutorials on this", " 4 Tutorial: Objects &amp; structures in R After working through Tutorial 4, youll know about types of data in R (numbers, text, factors, dates, logical/other operators) know about types of objects in R (scalars, vectors, matrices, data frames, lists) 4.1 Types of data Objects in R can contain a variety of different types of data. Well get to know a selection of these, namely Numbers Text Factors Dates Missing data/NAs Logical/other operators To understand and work with these types of data, well now import a data set. The data set is called data_tutorial3.csv via OLAT/Materials/02_02.03.22/Data. The data set consists of data that is completely made up - a survey with 20 fictional students in a fictional seminar. We only use this data here so you can understand differences between types of data and types of objects. The datafile data_tutorial3.csv is structured as follows: Each row contains the answer for a single student. Each column contains all values given by students for a single variable. The variables included here are: name: the name of each student age: the age of each student (in years) date: the date on which each student was surveyed (in YYYY-MM-DD) outlet: the type of media outlet each students mainly uses to get information outlet_use: the time each student uses this media outlet daily (in hours) outlet_trust: how much each student trusts this media outlet (from 1 = not at all to 5 = very much) Well read in the file with read.csv(). Here, we specify where to find the data file with the argument x as well as that the first row contains variable names with the argument header = TRUE2. survey &lt;- read.csv2(&quot;data_tutorial3.csv&quot;, header = TRUE) survey ## name age date outlet outlet_use outlet_trust ## 1 Alexandra 20 2021-09-09 TV 2 5 ## 2 Alex 25 2021-09-08 Online 3 5 ## 3 Maximilian 29 2021-09-09 Zeitung 4 1 ## 4 Moritz 22 2021-09-06 TV 2 2 ## 5 Vanessa 25 2021-09-07 Online 1 3 ## 6 Andrea 26 2021-09-09 Online 3 4 ## 7 Fabienne 26 2021-09-09 TV 3 2 ## 8 Fabio 27 2021-09-09 Online 0 1 ## 9 Magdalena 8 2021-09-08 Online 1 4 ## 10 Tim 26 2021-09-07 TV NA 2 ## 11 Alex 27 2021-09-09 Online NA 2 ## 12 Tobias 26 2021-09-07 Online 2 2 ## 13 Michael 25 2021-09-09 Online 3 2 ## 14 Sabrina 27 2021-09-08 Online 1 2 ## 15 Valentin 29 2021-09-09 TV 1 5 ## 16 Tristan 26 2021-09-09 TV 2 5 ## 17 Martin 21 2021-09-09 Online 1 2 ## 18 Anna 23 2021-09-08 TV 3 3 ## 19 Andreas 24 2021-09-09 TV 2 5 ## 20 Florian 26 2021-09-09 Online 1 5 4.1.1 Accessing variables in data sets Variables that are part of a data set  also called: data frame (well come back to data frames a bit later in Data frames &amp; matrices)  can be accessed by their name, but we need to specify the data set and the variable name and combine them with the access operator: $. This takes the form of: dataframe$variablename For instance, we could retrieve the variable name in our survey data set by simply using its variable name: We specify the object we want to access, the data frame survey and then retrieve the column name via the operator $: survey$name ## [1] &quot;Alexandra&quot; &quot;Alex&quot; &quot;Maximilian&quot; &quot;Moritz&quot; &quot;Vanessa&quot; &quot;Andrea&quot; &quot;Fabienne&quot; &quot;Fabio&quot; &quot;Magdalena&quot; ## [10] &quot;Tim&quot; &quot;Alex&quot; &quot;Tobias&quot; &quot;Michael&quot; &quot;Sabrina&quot; &quot;Valentin&quot; &quot;Tristan&quot; &quot;Martin&quot; &quot;Anna&quot; ## [19] &quot;Andreas&quot; &quot;Florian&quot; 4.1.2 Numbers A typical type of data you may come is numeric data. In our data set, the age of respondents is saved as numbers. In R, this type of data is called numeric. To check if age is really saved as numbers, you can use mode(). The function tells you an objects type. mode(survey$age) ## [1] &quot;numeric&quot; 4.1.3 Text Letters and text is saved in the character format. In our data set, we know that the variable name is likely to contain textual content. Well check this with the same command mode(): #find out which type of data the object word consists of mode(survey$name) ## [1] &quot;character&quot; You may have already spotted something else: If you want to save something in character format, you have to set quotation marks  before and after the respective values. For instance, if you save the number 1 with quotation marks, R will use the character format: word &lt;- &quot;1&quot; mode(word) ## [1] &quot;character&quot; However, if you save the number 1 without quotation marks, R will use the numeric format: word &lt;- 1 mode(word) ## [1] &quot;numeric&quot; Why is this important? In R, many functions for conducting statistical analyses, for example, can only be executed with objects containing numeric data, not character data. For instance: Lets say you want R to calculate the mean of some numbers: numbers &lt;- c(&quot;1&quot;, &quot;8&quot;, &quot;9&quot;, &quot;4&quot;) mean(numbers) ## Warning in mean.default(numbers): Argument ist weder numerisch noch boolesch: gebe NA zurück ## [1] NA R will throw you an error message. Why? Because you saved these numbers as character values, not as numeric values: mode(numbers) ## [1] &quot;character&quot; If we save these numbers in a numeric format, i.e., as numbers not text, the command works just fine: numbers &lt;- c(1,8,9,4) mean(numbers) ## [1] 5.5 4.1.4 Factors Factors constitute an additional type of data. Factors can include both numeric data and characters. What is important, however, is that they treat any types of data as categorical. We can, for instance, convert the variable name - which now contains each students name in character format - to a factor using as.factor(): survey$name &lt;- as.factor(survey$name) As you can see, the variable age now contains each name as an independent level. You can get each unique level with the levels() command: levels(survey$name) ## [1] &quot;Alex&quot; &quot;Alexandra&quot; &quot;Andrea&quot; &quot;Andreas&quot; &quot;Anna&quot; &quot;Fabienne&quot; &quot;Fabio&quot; &quot;Florian&quot; &quot;Magdalena&quot; ## [10] &quot;Martin&quot; &quot;Maximilian&quot; &quot;Michael&quot; &quot;Moritz&quot; &quot;Sabrina&quot; &quot;Tim&quot; &quot;Tobias&quot; &quot;Tristan&quot; &quot;Valentin&quot; ## [19] &quot;Vanessa&quot; You may have noted that the data set survey contains 20 observations but that the variable age only included 19 levels. Why? If you inspect the data set, you can see that two students have the same name (here, Alex in row 2 and 11) - which is why we have 20 observations, but only 19 unique levels for the variable name: survey ## name age date outlet outlet_use outlet_trust ## 1 Alexandra 20 2021-09-09 TV 2 5 ## 2 Alex 25 2021-09-08 Online 3 5 ## 3 Maximilian 29 2021-09-09 Zeitung 4 1 ## 4 Moritz 22 2021-09-06 TV 2 2 ## 5 Vanessa 25 2021-09-07 Online 1 3 ## 6 Andrea 26 2021-09-09 Online 3 4 ## 7 Fabienne 26 2021-09-09 TV 3 2 ## 8 Fabio 27 2021-09-09 Online 0 1 ## 9 Magdalena 8 2021-09-08 Online 1 4 ## 10 Tim 26 2021-09-07 TV NA 2 ## 11 Alex 27 2021-09-09 Online NA 2 ## 12 Tobias 26 2021-09-07 Online 2 2 ## 13 Michael 25 2021-09-09 Online 3 2 ## 14 Sabrina 27 2021-09-08 Online 1 2 ## 15 Valentin 29 2021-09-09 TV 1 5 ## 16 Tristan 26 2021-09-09 TV 2 5 ## 17 Martin 21 2021-09-09 Online 1 2 ## 18 Anna 23 2021-09-08 TV 3 3 ## 19 Andreas 24 2021-09-09 TV 2 5 ## 20 Florian 26 2021-09-09 Online 1 5 4.1.5 Dates Since well be working with textual data and are often interested in when these texts are published, well need to know about dates. The date format can include any type of information on time. Lets check out an example using the variable date in our data set, which specifies the day on which students were surveyed. survey$date ## [1] &quot;2021-09-09&quot; &quot;2021-09-08&quot; &quot;2021-09-09&quot; &quot;2021-09-06&quot; &quot;2021-09-07&quot; &quot;2021-09-09&quot; &quot;2021-09-09&quot; &quot;2021-09-09&quot; &quot;2021-09-08&quot; ## [10] &quot;2021-09-07&quot; &quot;2021-09-09&quot; &quot;2021-09-07&quot; &quot;2021-09-09&quot; &quot;2021-09-08&quot; &quot;2021-09-09&quot; &quot;2021-09-09&quot; &quot;2021-09-09&quot; &quot;2021-09-08&quot; ## [19] &quot;2021-09-09&quot; &quot;2021-09-09&quot; When inspecting our data set, we can see that the variable is saved in the following format: YYYY-MM-DD (i.e., the year followed by the month and day on which a student was surveyed). However, as of yet this date is saved in character format. For dates and times, that format is not too helpful. If we want to work with dates in a more flexible way, we should save them in the date format using the as.Date() format: survey$date &lt;- as.Date(survey$date) 4.1.6 Missing data/NAs Something we will often encounter is missing data, also called NAs. In our data set, the variable outlet_use which describes how many hours a day a student uses a specific outlet contains missing data: survey$outlet_use ## [1] 2 3 4 2 1 3 3 0 1 NA NA 2 3 1 1 2 1 3 2 1 When working with data, you should always check how much of it may be missing (and of course, why). To do so, you can use the is.na() command: It tells you which values in a specific objects are missing (TRUE) or not missing (FALSE): is.na(survey$outlet_use) ## [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE TRUE TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE For instance, the first 9 observations do not contain any missing values for the variable age, but the 10th observation does. With larger data sets, you obviously would not want to check this manually for every single observation. We can use a little trick here: Since the value FALSE counts as 0 and the value TRUE counts as a 1 as.numeric(FALSE) ## [1] 0 as.numeric(TRUE) ## [1] 1  we can simply calculate the sum of these values for survey$outlet_use to see whether how many observations are missing: sum(is.na(survey$outlet_use)) ## [1] 2 4.1.7 Logical/other operators Lastly, you should know about logical (or other) operators. These are often used to check whether certain statements are true/false, whether some values take on a certain value or not, or whether some values are higher/lower than others. Since we wont need this right away,I wont go into details here - but we will need these later: Table 4.1: Logical/other operators Operator Meaning TRUE indicates that a certain statement applies, i.e., is true FALSE indicates that a certain statement does not apply, i.e., is not true &amp; connects two statements which should both be true | connects two statements of which at least one should be true == indicates that a certain value should equal another one != indicates that a certain value should not equal another one &gt; indicates that a certain value should be larger than another one &lt; indicates that a certain value should be smaller than another one &gt;= indicates that a certain value should be larger than or equal to another one &lt;= indicates that a certain value should be smaller than or equal to another one You may wonder: Why should I use this? Glad you asked: Well need these operators, for instance, to filter data sets by specific values or apply functions if some conditions (but not others) are true. For instance, you could use a logical operator to only keep those students in the data set that are older than 21 (17 out of 20 students). We filter the data set using the &gt; operator. We can get basic information about this data set using the str() command: survey_subset &lt;- survey[survey$age&gt;21,] str(survey_subset) ## &#39;data.frame&#39;: 17 obs. of 6 variables: ## $ name : Factor w/ 19 levels &quot;Alex&quot;,&quot;Alexandra&quot;,..: 1 11 13 19 3 6 7 15 1 16 ... ## $ age : int 25 29 22 25 26 26 27 26 27 26 ... ## $ date : Date, format: &quot;2021-09-08&quot; &quot;2021-09-09&quot; &quot;2021-09-06&quot; &quot;2021-09-07&quot; ... ## $ outlet : chr &quot;Online &quot; &quot;Zeitung&quot; &quot;TV&quot; &quot;Online &quot; ... ## $ outlet_use : int 3 4 2 1 3 3 0 NA NA 2 ... ## $ outlet_trust: int 5 1 2 3 4 2 1 2 2 2 ... 4.2 Types of objects Great, now you know all about types of data. As promised, this tutorial will also teach you about different types of objects: Scalars Vectors Data frames &amp; matrices Lists Other types of objects 4.2.1 Scalars The smallest type of data you will encounter are scalars. Scalars are objects consisting of a single value - for example, a letter, a word, a sentence, a number, etc. Youve already seen what a scalar looks like - remember the very first time you were Writing Code? Here, we defined an objects word which only consisted of the word hello. word &lt;- &quot;hello&quot; word ## [1] &quot;hello&quot; We could also save a single number this way: number &lt;- 1 number ## [1] 1 The same applies to a single sentence: sentence &lt;- &quot;I would like to be saved as a scalar&quot; sentence ## [1] &quot;I would like to be saved as a scalar&quot; 4.2.2 Vectors The next type of data you should know are vectors: Vectors are objects that consist of several values of the same type of data. For instance, if we want to save several words or numbers separately, we can save them as vectors. This means that the first element of our vector will be our first word, the second the second word and so forth. Importantly, a vector can only contain data of the same type - for instance, you cannot save data in numeric and character format in the same format. In principle, you can often (but not always) compare vectors with variables in data sets: They contain values for all observations in your data set (with all of these values being of the same data type). An example would be the numbers from 1 to 20 that we worked with before. Now, it becomes apparent what the c() stands for - it specifies the vector format. We define the object numbers to consist of the a vector c() which contains the values 1 to 20. Here, we ask R to include all values from 1 to 20 by inserting a colon between both numbers: numbers &lt;- c(1:20) numbers ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 If you want the vector numbers to only contain selected numbers from 1 to 20, you can specify these numbers and separate them using a comma: numbers &lt;- c(1,5,8,19,20) numbers ## [1] 1 5 8 19 20 We can do the same thing for data in character format: fruits &lt;- c(&quot;Apple&quot;, &quot;Banana&quot;, &quot;Orange&quot;, &quot;Lemon&quot;) fruits ## [1] &quot;Apple&quot; &quot;Banana&quot; &quot;Orange&quot; &quot;Lemon&quot; In practice, a vector is nothing else than scalars of the same typed chained together - in this case, the words Apple, Banana, Orange, and Lemon. If you love to write inefficient code, you could also define separate objects (here: scalars) consisting of every element of the vector you want to define and then chain them together (10/10 wouldnt recommend because this is unnecessarily complicated): apple &lt;- &quot;Apple&quot; banana &lt;- &quot;Banana&quot; orange &lt;- &quot;Orange&quot; lemon &lt;- &quot;Lemon&quot; fruits &lt;- c(apple, banana, orange, lemon) fruits ## [1] &quot;Apple&quot; &quot;Banana&quot; &quot;Orange&quot; &quot;Lemon&quot; This would lead to very similar results, but you would have to write 4 more lines of code compared to the previous example. Subsetting vectors: You can select elements from a vector. By inserting an index vector in square brackets directly behind the name of the vector, you may inform R that you wish to choose certain specific elements (i.e., asubset) from this vector. Try numbers[3] to see the third element (which is 8) of the numbers vector and try fruits[3] to see the third element (which is Orange) of the fruits vector: numbers[3] ## [1] 8 fruits[3] ## [1] &quot;Orange&quot; You can also index inversely, i.e. select all elements except the element of the index vector. For this you have to put a - in front of the index vector. numbers[-3] ## [1] 1 5 19 20 fruits[-3] ## [1] &quot;Apple&quot; &quot;Banana&quot; &quot;Lemon&quot; Finally, you can chose to subset more than one element by providing a range. Lets have a look at the first three elements of the numbers and fruit vector: numbers[1:3] ## [1] 1 5 8 fruits[1:3] ## [1] &quot;Apple&quot; &quot;Banana&quot; &quot;Orange&quot; 4.2.3 Data frames &amp; matrices An even bigger type of data, in this sense, are data frames and matrices: Data frames &amp; matrices consist of several vectors of the same length. Matrices and data frames come closest to how you may understand data sets (for instance, in SPSS). Our survey data set is one example for a data frame: survey ## name age date outlet outlet_use outlet_trust ## 1 Alexandra 20 2021-09-09 TV 2 5 ## 2 Alex 25 2021-09-08 Online 3 5 ## 3 Maximilian 29 2021-09-09 Zeitung 4 1 ## 4 Moritz 22 2021-09-06 TV 2 2 ## 5 Vanessa 25 2021-09-07 Online 1 3 ## 6 Andrea 26 2021-09-09 Online 3 4 ## 7 Fabienne 26 2021-09-09 TV 3 2 ## 8 Fabio 27 2021-09-09 Online 0 1 ## 9 Magdalena 8 2021-09-08 Online 1 4 ## 10 Tim 26 2021-09-07 TV NA 2 ## 11 Alex 27 2021-09-09 Online NA 2 ## 12 Tobias 26 2021-09-07 Online 2 2 ## 13 Michael 25 2021-09-09 Online 3 2 ## 14 Sabrina 27 2021-09-08 Online 1 2 ## 15 Valentin 29 2021-09-09 TV 1 5 ## 16 Tristan 26 2021-09-09 TV 2 5 ## 17 Martin 21 2021-09-09 Online 1 2 ## 18 Anna 23 2021-09-08 TV 3 3 ## 19 Andreas 24 2021-09-09 TV 2 5 ## 20 Florian 26 2021-09-09 Online 1 5 Lets say we dont have a data set yet but want to create one ourselves. For instance, we have three vectors of the same length that contain the following data: a vector called fruits consisting of the names of four different fruits (character) a vector called price consisting of the amount of money each fruit costs (numeric) a vector called color consisting of the color of each fruit (character) fruits &lt;- c(&quot;Apple&quot;, &quot;Banana&quot;, &quot;Orange&quot;, &quot;Lemon&quot;) price &lt;- c(0.8,0.6,0.78,0.9) color &lt;- c(&quot;red&quot;, &quot;yellow&quot;, &quot;orange&quot;, &quot;yellow&quot;) Since these vectors describe the same data, we want them to be saved as one data set. To create the data set data_fruits, we use the command data.frame(), which contains: an vector called fruits as its first column a vector called price as its second column a vector color as its third column Here, columns describe different variables and rows observations. data_fruits &lt;- data.frame(&quot;fruits&quot;= fruits, &quot;price&quot; = price, &quot;color&quot; = color) data_fruits ## fruits price color ## 1 Apple 0.80 red ## 2 Banana 0.60 yellow ## 3 Orange 0.78 orange ## 4 Lemon 0.90 yellow In difference to data frames that can encompass different types of data, matrices consist of vectors of exactly the same type of data - for instance, only character vectors or numeric vectors. This is also why we will mostly be working with data frames in this seminar - they are just more flexible and more suitable for the data we will work with. For a nice example for comparing scalars, vectors, data frames, and matrices, check out this example here. 4.2.4 Lists Lastly, you should know about lists. Lists can be described as an array of (different) objects. As discussed before, data frames can encompass vectors consisting of different types of data (for instance, character and numeric vectors). However, these all have to be vectors (and of the same length). In some case, you may want to save very different types of objects - scalars, vectors, data frames, and objects -, which will differ in length3. In this case, lists offer the most flexible way of saving very different objects within one object (i.e., the list). Lets say that we want to save our data frame data_fruits as well the data frame survey in a single object. We do so by specifying a list which includes data_fruits as its first and survey as its second element: list &lt;- list(data_fruits, survey) View(list) Image: List As you see, the object list consists of two elements: the first element [[1]] encompasses the data frame data_fruits the second element [[2]] encompasses the data frame survey 4.2.5 Other types of objects Since well be learning how to conduct automated content analysis in this tutorial, well encounter a bunch of other types of data such as the corpus or the document-feature-matrix (dfm). You dont have to know anything about these data types for now - just be aware that other types of objects exist. 4.3 Take Aways Types of data: In R, you can work with different types of data in numeric, character, factor, or data format. Important commands: mode(), str(), as.character(), as.numeric(), as.factor(), levels(), as.Date() &amp; is.na() Types of objects: In R, you can work with different types of objects, for instance scalars, vectors, data frames, matrices, or lists. Important commands: c(), data.frame(), list() Acessing variables: You can access variables in a given data frame by using the $ operator surrounded by the name of the data frame and the name of the variable that you want to access, e.g.: dataframe$variablename 4.4 More tutorials on this You still have questions? The following tutorials &amp; papers can help you with that: Objekte und Syntax by M. Wettstein - OLAT course for UZH students SICSS Boot Camp by C. Bail, Video 2 YaRrr! The Pirates Guide to R by N.D.Phillips, Tutorial 4, 5, 7 und 8 Computational Methods in der politischen Kommunikationsforschung by J. Unkel, Tutorial 2 R Cookbook by Long et al., Tutorial 5 Lets keep going: Tutorial: Reading data in/out Dont worry, well discuss the read.csv2() command in a bit. Ignore it for now. Length means that these objects may contain different numbers of elements (in the case of scalars and vectors, for example) or different numbers of rows/columns (in the case of data frames and matrices, for example) "],["tutorial-reading-data-inout.html", " 5 Tutorial: Reading data in/out 5.1 Getting data into R 5.2 Getting data out of R 5.3 Other packages for getting data into/out of R 5.4 Take Aways 5.5 More tutorials on this", " 5 Tutorial: Reading data in/out After working through Tutorial 5, youll understand how to get data into and out of R For this tutorial, well again use the data set data_tutorial3.csv (via OLAT/Materials/02_02.03.22/Data). The data set has already been introduced and explained in Tutorial: Objects &amp; structures in R, so I wont go into detail here. survey &lt;- read.csv2(&quot;data_tutorial3.csv&quot;, header = TRUE) One of the most frequently encountered external data types youll have to get into R are comma-separated values files, or short, CSV files. You may know CSV files from Excel - oftentimes, such data consists of observations (in rows) and variables (in columns). Values are separated by a separator (oftentimes a comma or a semicolon, depending on your data). 5.1 Getting data into R This tutorial doesnt teach you that much new. In fact, we have already encountered a CSV file when reading in data for tutorial 4. survey &lt;- read.csv2(&quot;data_tutorial3.csv&quot;) What does this command do? Lets see: ?read.csv2 Image: Help for the read.csv2 function The read.csv2() function is part of the utils package. To read in CSV files, two different functions exist: read.csv() reads in CSV files where values are comma separated read.csv2() reads in CSV files where values are semicolon separated Other than that, both functions work the same way and consist of the same arguments: file: Here, you need to identify the name of the CSV files that should be read in (including the file extention, here .csv). The file should be located in your working directory, otherwise R will not be able to identify it: file = data_tutorial3.csv header: This argument specifies whether or not the first row of the CSV file contains the name of variables. It is automatically set to true - thus, if our data wouldnt contain the name of each variable in its first row, we would need to set this argument to FALSE. In our case, we could either ignore this argument (since it is automatically set to TRUE) or actively set it to TRUE. Both leads to the same result. Important: R differentiates between necessary (marked in red) and obligatory (marked in green) arguments. Image: Help Arguments where no default value is given (i.e., those without a =) are necessary. That means you have to specify it once you call the function by passing respective values to the function. For instance, you cannot read in a CSV file without specifying the argument file - R would not even know which file to read in in that case. However, arguments were are default value is given can be ignored. If you do not specify values for these arguments yourself, R will simply take the default value. For instance, the read.csv2() function will automatically use the first row of a CSV file as column names, unless you actively set the argument header to FALSE. Another important thing to know is that you can specify arguments in functions in two ways: explicitly by name, for instance by setting file equal to data_tutorial3.csv implicitly by order, for instance by passing data_tutorial3.csv as the first argument to the read.csv2() function In fact, the following two commands will give the exact same results: survey &lt;- read.csv2(&quot;x = data_tutorial3.csv&quot;) survey &lt;- read.csv2(&quot;data_tutorial3.csv&quot;) 5.2 Getting data out of R In some cases, you may want to also get data out of R - for instance, export a newly created data set as a CSV file. You can easily do that using the write.csv() or the write.csv2() function by specifying the arguments x (i.e., which object should be exported) and file (i.e., how the exported file should be named). write.csv2(x=survey, file=&quot;survey_export.csv&quot;) 5.3 Other packages for getting data into/out of R When working with R, there will be many other data types you may wish to import or export. While we wont cover all of them here, the following packages deliver some very useful additional functions for doing so readxl and xlsx: working with excel files, especially .xls and .xlsx files. readr: working with many other data types, including text files foreign: working with many other data types, including SPSS or STATA files 5.4 Take Aways Importing data: read.csv(), read.csv2() Exporting data: write.csv(), write.csv2() 5.5 More tutorials on this You still have questions? The following tutorials &amp; papers can help you with that: YaRrr! The Pirates Guide to R by N.D.Phillips, Tutorial 9 Now lets see what youve learned so far: Tutorial: Test your knowledge. "],["tutorial-test-your-knowledge.html", " 6 Tutorial: Test your knowledge 6.1 Task 1 6.2 Task 2 6.3 Task 3 6.4 Task 4 6.5 Task 5", " 6 Tutorial: Test your knowledge After working through Tutorial 6, youll have assessed what you are already good at know what chapters and concepts you might want to repeat again have managed to apply the basic concepts of R to real-world data 6.1 Task 1 Below you will see multiple choice questions. Please try to identify the correct answers. 1, 2, 3 and 4 correct answers are possible for each question. 1. What panels are part of RStudio? - source - console - input - packages, files &amp; plots 2. How do you activate R packages after you have installed them? - import.packages() - install.packages() - package() - library() 3. How do you create a vector in R with elements 1, 2, 3? - cbind(1,2,3) - cb(1,2,3) - c(1,2,3) - cmb(1,2,3) 4. Imagine you have a vector called vector with 10 numeric elements. How do you retrieve the 8th element? - vector[-2] - vector[-2] - vector[8] - vector[8] 5. Imagine you have a vector called hair with 5 elements: brown, black, red, blonde, other. How do you retrieve the color blonde? - hair[4] - hair[4] - hair[blonde] - hair[blonde] 6.2 Task 2 Create a numeric vector with 8 values and assign the name age to the vector. First, display all elements of the vector. Then print only the 5th element. After that, display all elements except the 5th. Finally, display the elements at the positions 6 to 8. 6.3 Task 3 Create a non-numeric, i.e. character, vector with 4 elements and assign the name eye_color to the vector. First, print all elements of this vector to the console. Then have only the value in the 2nd element displayed, then all values except the 2nd element. At the end, display the elements at the positions 2 to 4. 6.4 Task 4 Create a data frame called data. The data frame should contain the following variables (in this order): a vector called food. It should contain 5 elements, namely the names of your five favorite dishes. a vector called description. For every dish mentioned in food, please describe the dish in a single sentence (for instance, if the first food you describe is pizza, you could write: This is an Italian dish, which I prefer with a lot of cheese.) a vector called rating. Rate every dish mentioned in food with 1-5 (using every number only once), i.e., by rating your absolute favorite dish out of all five with a 1 and your least favorite dish out of all five with a 5. Hint: For me, the data frame would look something like this: ## food description Rating ## 1 pizza Italian dish, I actually prefer mine with little cheese 3 ## 2 pasta Another Italian dish 1 ## 3 ice cream The perfect snack in summer 2 ## 4 crisps Potatoes and oil - a luxurious combination 4 ## 5 passion fruit A fruit that makes me think about vacation 5 6.5 Task 5 Can you sort the data in your prior data set by rating - with your favorite dish (i.e., the one rated 1) on top of the list and your least favourite dish (i.e., the one rated 5) on the bottom? Important: You do not yet know this command - youll have to google for the right solution. Please do and note down the exact search terms you used for googling, so we can discuss them next week. Hint: For me, the data frame would look something like this: ## food description Rating ## 1 pasta Another Italian dish 1 ## 2 ice cream The perfect snack in summer 2 ## 3 pizza Italian dish, I actually prefer mine with little cheese 3 ## 4 crisps Potatoes and oil - a luxurious combination 4 ## 5 passion fruit A fruit that makes me think about vacation 5 When youre ready to look at the solutions, you can find them here: Solutions for Tutorial 6. Now that youre well versed in data types and structures, lets move on to data management in the tidyverse in the Tutorial: Data management with tidyverse. "],["tutorial-data-management-with-tidyverse.html", " 7 Tutorial: Data management with tidyverse 7.1 Why not stick with Base R? 7.2 Tidyverse packages 7.3 Tidy data 7.4 The pipe operator 7.5 Data transformation with dplyr 7.6 Take-Aways 7.7 More tutorials on this", " 7 Tutorial: Data management with tidyverse After working through Tutorial 7, youll know the advantages of the tidyverse vs. Base R know about different formats of tabular data understand what packages are included in the tidyverse meta-package know how to do data modifications and transformations with dplyr 7.1 Why not stick with Base R? You might wonder why weve spent so much time exploring functions in Base R to now learn data management with tidyverse. After all, data management can also be done in Base R, cant it? I personally recommend that all R beginners should work with the tidyverse as early as possible. There are three reasons supporting my argument: Ease of use: The tidyverse is very accessible for R beginners, i.e. its syntax is very easy to understand. It allows you to set goals (i.e. what you want to do with your data) and get you working on these goals very quickly. Definitely more quickly than in Base R! Standard for data management: A few years ago, the tidyverse has become the de facto standard for data management in R. It is a meta-package, which means that it is a collection of distinct packages that all follow the same design principles to make code reading and writing as simple as possible. For example, all functions are named after verbs that indicate exactly what they perform (e.g. filter or summarize). Beautiful graphs: With the tidyverse, all data management steps can be swiftly transferred into beautiful graphs. This is because the most popular graph package in R, ggplot2, is part of the tidyverse. Are you excited now? Then lets get started! 7.2 Tidyverse packages The tidyverse comes with a great arsenal of topic-specific packages and their respective functions. It includes packages for: tibble: creating data structures like tibbles, which is an enhanced type of data frame readr, haven, readxl: reading data (e.g. readr for CSV, haven for SPSS, Stata and SAS, readxl for Excel) tiydr, dplyr: data transformation, modification, and summary statistics stringr, fircats, lubridate: create special, powerful object types (e.g. stringr for working with text objects, forcats for factors, lubridate for time data) purrr: programming with R ggplot2: graphing/charting The most frequently used packages of the tidyverse can be installed and activated in one go (less frequently used packages like haven still need to be installed and activated separately): install.packages(&quot;tidyverse&quot;) # install the package (only on the first time) library(tidyverse) # active the package 7.3 Tidy data Dataframes, which we learned about in Types of objects, are tabular data. However, data can also have other formats, for example as nested, i.e. hierarchical, lists. In communication research, these other data formats are mainly used by social media and their respective APIs (perhaps you have heard of the JSON format before). In our course, however, well focus on tabular data.The same data can be represented differently in tables. We perceive some of these representations as tidy, others as messy. While tidy data principles establish a standard for organizing data values inside a data frame and thus all tidy data look the same, every messy dataset is messy in its own way. Take a look at the table below. It shows a Starwars data set that comes pre-installed with the dplyr package. Do you feel the tabled data is messy? Why (not)? ## # A tibble: 10 x 3 ## name body_feature value ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Anakin Skywalker height 188 ## 2 Anakin Skywalker mass 84 ## 3 Chewbacca height 228 ## 4 Chewbacca mass 112 ## 5 Darth Vader height 202 ## 6 Darth Vader mass 136 ## 7 Jabba Desilijic Tiure height 175 ## 8 Jabba Desilijic Tiure mass 1358 ## 9 Leia Organa height 150 ## 10 Leia Organa mass 49 Overall, this data is messy. It comes with three messy problems: This body_feature column comprises information relating to both height and weight, i.e. both variables are stored in a single column. As a result, the value column is reliant on the body_feature column; we cant tell the stored values apart by merely looking at the value column. We always need to check the body_feature column. Consequently, we have issues with vectorized functions (remember, in R, columns in data sets are vectors): We cant, for example, use the mean() function on the value column to determine the average weight of the Star Wars characters since the height values are also stored there. What do you think of this table? Is it messy? ## # A tibble: 5 x 3 ## name height mass ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Anakin Skywalker 188 84 ## 2 Chewbacca 228 112 ## 3 Darth Vader 202 136 ## 4 Jabba Desilijic Tiure 175 1358 ## 5 Leia Organa 150 49 This table looks tidy! Tidy data is a standard way of mapping the meaning of a dataset to its structure. We determine whether a dataset is messy or tidy depending on how rows, columns and tables are matched up with observations, variables and types. We consider a table tidy when it follows the following golden rules: Columns: Every column is one variable. Rows: Every row is one observation. Cells: Every cell contains one single value. Image: The tidy data principle (Source: R for Data Science) In messy data sets, on the other hand Column headers are values, not variable names. Multiple variables are stored in one column. Variables are stored in both rows and columns. Multiple types of observational units are stored in the same table. A single observational unit is stored in multiple tables. Why should you be concerned about tidy data organization? There are two major advantages: When you have a consistent data structure, it is easier to learn the respective tools that work well with this data structure. dplyr, ggplot2, and all the other tidyverse packages are designed for working with tidy data. Putting variables in columns makes Rs vectorized nature shine. The majority of built-in R-functions (like the mean() function) works with vectors of values. As a result, the tidy reorganization of data seems only natural for a good work flow in R. If you have been working mainly with survey data, then you will already be familiar with these basic rules, as data export from survey software usually follows these principles. However, real-world data from databases or social media often does not follow these principles. Thats why its sometimes true to say that 80% of data analysis is spent on cleaning and transforming data. 7.4 The pipe operator Truly, dplyr is my favorite tidyverse package (even more so than ggplot2, which well cover later!). It allows you to perform powerful data transformations in just a few simple steps. To this end, dplyr relies on the pipe operator (%&gt;%).4 The %&gt;% operator allows functions to be applied sequentially to the same source object in a concise manner, so that step-by-step transformations can be applied to the data. Therefore, we always call the source object first and then add each transformation step separated by the %&gt;% operator. Lets illustrate this concept with an example. Well use the Starwars data set that you are already familiar with. starwars_data %&gt;% # First, we define the source object, i.e. the data frame that we want to transform, followed by the pipe operator plot() # Second, we specify which function should be performed on the source object, here: scatterplot Now, thats not very impressive. We could do the same in Base R like this: plot(starwars_data) However, dplyr gets really impressive when you chain functions sequentially. You can apply certain selection criteria to your data and plot it in one go. For example, we might exclude the variable name from our scatter plot, since its not a metric variable anyway. Also, we might want to look only at those Starwars characters taller than 170 cm. Lets try it in a single run! starwars_data %&gt;% # Define the source object select(height, mass) %&gt;% # Keep only the height and mass column filter(height &gt; 170) %&gt;% # Filter all observations that are taller than 170cm plot() # Plot! Now try to do the same in Base R: plot(starwars_data[starwars_data$height&gt;170,]$mass~starwars_data[starwars_data$height&gt;170,]$height, xlab=&quot;height&quot;, ylab=&quot;mass&quot;) The Bse R code is longer, more nested, and not as readable as the code written in dpylr. And the more selection criteria and functions you need to implement, the worse it gets. For example, imagine you would also want to exlude Starswars characters with a mass bigger than 1200kg. Peace of cake with dplyr: starwars_data %&gt;% select(height, mass) %&gt;% filter(height &gt; 170) %&gt;% filter(mass &lt; 1200) %&gt;% plot() 7.5 Data transformation with dplyr dplyrcomes with six main functions: select: select variables by column by column filter: filter observations row by row arrange: sort data in ascending or descending order mutate: calculate new variables or transform existing ones summarize: summarize variables (e.g. mean, standard deviation, etc.) group_by: group the data by one or more variables More tutorials will be posted here! 7.6 Take-Aways Tidy data: is a tabular in which each column represents one single variable, each row represents a single observation and each cell contaon only one single value Pipe operator: %&gt;% is used to chain functions and apply them to a source object. We call these chains of functions pipes dplyr functions: there are six main dplyr functions that you should know of: select, filter, arrange, mutate, summarize, and group_by 7.7 More tutorials on this You still have questions? The following tutorials &amp; papers can help you with that: Computational Methods in der politischen Kommunikationsforschung by J. Unkel, Tutorial 7, 9 &amp; 10 R for Data Science, Chapter 12 YaRrr! The Pirates Guide to R by N.D.Phillips, Tutorial 10.4 The tidyverse style guide Data wrangling with dplyr &amp; tidyr Cheat Sheet To be precise, the pipe operator was introduced to R with the package magrittr, not with dplyr. Nowadays, the %&gt;% operator can be used outside the tidyverse package if magrittr is installed and loaded: library(magrittr). "],["solutions.html", "Solutions Solutions for Tutorial 6", " Solutions This is where youll find solutions for all of the tutorials. Solutions for Tutorial 6 Task 1 Below you will see multiple choice questions. Please try to identify the correct answers. 1, 2, 3 and 4 correct answers are possible for each question. 1. What panels are part of RStudio? Solution: source (x) console (x) packages, files &amp; plots (x) 2. How do you activate R packages after you have installed them? Solution: library() (x) 3. How do you create a vector in R with elements 1, 2, 3? Solution: c(1,2,3) (x) 4. Imagine you have a vector called vector with 10 numeric elements. How do you retrieve the 8th element? Solution: vector[8] (x) 5. Imagine you have a vector called hair with 5 elements: brown, black, red, blonde, other. How do you retrieve the color blonde? Solution: hair[4] (x) Task 2 Create a numeric vector with 8 values and assign the name age to the vector. First, display all elements of the vector. Then print only the 5th element. After that, display all elements except the 5th. Finally, display the elements at the positions 6 to 8. Solution: age &lt;- c(65,52,73,71,80,62,68,87) age ## [1] 65 52 73 71 80 62 68 87 age[5] ## [1] 80 age[-5] ## [1] 65 52 73 71 62 68 87 age[6:8] ## [1] 62 68 87 Task 3 Create a non-numeric, i.e. character, vector with 4 elements and assign the name eye_color to the vector. First, print all elements of this vector to the console. Then have only the value in the 2nd element displayed, then all values except the 2nd element. At the end, display the elements at the positions 2 to 4. eye_color &lt;- c(&quot;blue&quot;, &quot;green&quot;, &quot;brown&quot;, &quot;other&quot;) eye_color ## [1] &quot;blue&quot; &quot;green&quot; &quot;brown&quot; &quot;other&quot; eye_color[2] ## [1] &quot;green&quot; eye_color[-2] ## [1] &quot;blue&quot; &quot;brown&quot; &quot;other&quot; eye_color[2:4] ## [1] &quot;green&quot; &quot;brown&quot; &quot;other&quot; Task 4 Create a data frame called data. The data frame should contain the following variables (in this order): a vector called food. It should contain 5 elements, namely the names of your five favorite dishes. a vector called description. For every dish mentioned in food, please describe the dish in a single sentence (for instance, if the first food you describe is pizza, you could write: This is an Italian dish, which I prefer with a lot of cheese.) a vector called rating. Rate every dish mentioned in food with 1-5 (using every number only once), i.e., by rating your absolute favorite dish out of all five with a 1 and your least favorite dish out of all five with a 5. Solution: data &lt;- data.frame(&quot;food&quot; = c(&quot;pizza&quot;, &quot;pasta&quot;, &quot;ice cream&quot;, &quot;crisps&quot;, &quot;passion fruit&quot;), &quot;description&quot; = c(&quot;Italian dish, I actually prefer mine with little cheese&quot;, &quot;Another Italian dish&quot;, &quot;The perfect snack in summer&quot;, &quot;Potatoes and oil - a luxurious combination&quot;, &quot;A fruit that makes me think about vacation&quot;), &quot;Rating&quot; = c(3,1,2,4,5)) data ## food description Rating ## 1 pizza Italian dish, I actually prefer mine with little cheese 3 ## 2 pasta Another Italian dish 1 ## 3 ice cream The perfect snack in summer 2 ## 4 crisps Potatoes and oil - a luxurious combination 4 ## 5 passion fruit A fruit that makes me think about vacation 5 Task 5 Can you sort the data in your data set by rating - with your favorite dish (i.e., the one rated 1) on top of the list and your least favourite dish (i.e., the one rated 5) on the bottom? Important: You do not yet know this command - youll have to google for the right solution. Please do and note down the exact search terms you used for googling, so we can discuss them next week. Solution: library(&quot;dplyr&quot;) data &lt;- data%&gt;%arrange(Rating) data ## food description Rating ## 1 pasta Another Italian dish 1 ## 2 ice cream The perfect snack in summer 2 ## 3 pizza Italian dish, I actually prefer mine with little cheese 3 ## 4 crisps Potatoes and oil - a luxurious combination 4 ## 5 passion fruit A fruit that makes me think about vacation 5 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
